clear all
close all

%machine = 'COMPUPITAR';
machine = 'OREK';

if strcmpi(machine, 'OREK')
    basedir = 'E:\pcp2ChR2 data\rebound';
elseif strcmpi(machine, 'COMPUPITAR')
    basedir = 'D:\pcp2ChR2 data\rebound';
else
    disp('Please specify computer so we know what directory to use')
    basedir = '';
end
cd(basedir)

% load the spreadsheet specifying which days belong to which manipulation
% sessions
[~, ~, raw] = xlsread('RBExptDates.xlsx');
xlsdata = raw(1:20,1:10);

% put the dates into an orderly structure
dates.mouse = {};
dates.testInhibDate = nan(19,1); % 19 total subjects
dates.preunpDate = nan(19,1);
dates.lastunpDate = nan(19,1);
dates.postunpDate = nan(19,1);
dates.prepairDate = nan(19,1); % same idx for posttraining, just 1 column over
dates.lastacqDate = nan(19,1);
dates.postpairDate = nan(19,1);
dates.lastextDate = nan(19,1);
dates.postextDate = nan(19,1); % the first group did not get extinction, remove 4
for m = 2:20 % cycle through each mouse (each row of spreadsheet)
    dates.mouse{m-1,1}=xlsdata{m,1};
    for c = 2:10
        switch xlsdata{1,c}
            case 'Inhib Block CR'
                dates.testInhibDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Pre-Unpaired'
                dates.preunpDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Last Unp'
                dates.lastunpDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Post-Unpaired'
                dates.postunpDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Pre-Paired'
                dates.prepairDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Last Acq'
                dates.lastacqDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Post-Paired'
                dates.postpairDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Last Ext'
                dates.lastextDate(m-1,1)=cell2mat(xlsdata(m,c));
            case 'Post-Extinction'
                dates.postextDate(m-1,1)=cell2mat(xlsdata(m,c));
        end
    end
end

% user specifies which mice to include in the dataset
mice = {'OK213';'OK211';'OK214';'OK215';'OK216';'OK217';'OK218';'OK234';...
    'OK235';'OK236';'OK237';'OK238';'OK239';'OK240';'OK241'};

% load all the trialdata
load('RBExpt_allTrials.mat')

% make corrected time vector
timeVector = 1:size(data.eyelidpos,2);
timeVector = timeVector * 0.00488372;
timeVector = timeVector - 0.2;


paired.mouse = {};
paired.session = [];
paired.crprob = [];
paired.cradjamp = [];
paired.rbamp = [];
paired.rbprob = [];
paired.rbtrace = [];
paired.eyelidposadj = [];

unpaired.mouse = {};
unpaired.session = [];
unpaired.crprob = [];
unpaired.cradjamp = [];
unpaired.rbamp = [];
unpaired.rbprob = [];
unpaired.rbtrace = [];
unpaired.eyelidposadj = [];

extinction.mouse = {};
extinction.session = [];
extinction.crprob = [];
extinction.cradjamp = [];
extinction.rbamp = [];
extinction.rbprob = [];
extinction.rbtrace = [];
extinction.eyelidposadj = [];

savings.mouse = {};
savings.session = [];
savings.crprob = [];
savings.cradjamp = [];
savings.rbamp = [];
savings.rbprob = [];
savings.rbtrace = [];
savings.eyelidposadj = [];

rebound.prePaired.mouse = {};
rebound.prePaired.laserint = [];
rebound.prePaired.rbamp = [];
rebound.prePaired.rbprob = [];
rebound.prePaired.rbtrace = [];

rebound.postPaired.mouse = {};
rebound.postPaired.laserint = [];
rebound.postPaired.rbamp = [];
rebound.postPaired.rbprob = [];
rebound.postPaired.rbtrace = [];

rebound.preUnp.mouse = {};
rebound.preUnp.laserint = [];
rebound.preUnp.rbamp = [];
rebound.preUnp.rbprob = [];
rebound.preUnp.rbtrace = [];

rebound.postUnp.mouse = {};
rebound.postUnp.laserint = [];
rebound.postUnp.rbamp = [];
rebound.postUnp.rbprob = [];
rebound.postUnp.rbtrace = [];

rebound.postExt.mouse = {};
rebound.postExt.laserint = [];
rebound.postExt.rbamp = [];
rebound.postExt.rbprob = [];
rebound.postExt.rbtrace = [];


for m = 1:length(mice)
    
    thisMouse = mice{m,1};
    mouseidx = find(strcmpi(thisMouse, dates.mouse));
    
    
    
    % get group acquisition curves
    startTraining = dates.prepairDate(mouseidx,1)+1;
    if strcmpi(thisMouse,'OK237') || strcmpi(thisMouse,'OK240')
        startTraining = 200106;
    end
    stopTraining = dates.lastacqDate(mouseidx,1);
    if ~isnan(startTraining)
        [trainingSessions] = getDateVector(startTraining, stopTraining);
        [paired]=updateCRRBProbStruct(trainingSessions, thisMouse, data, paired, timeVector, 'training');
    end
    
    % get group unpaired training curves
    startTraining = dates.preunpDate(mouseidx,1)+1;
    stopTraining = dates.lastunpDate(mouseidx,1);
    if ~isnan(startTraining)
        [trainingSessions] = getDateVector(startTraining, stopTraining);
        [unpaired]=updateCRRBProbStruct(trainingSessions, thisMouse, data, unpaired, timeVector, 'unpaired');
    end
    
    % get group extinction curves
    startTraining = dates.postpairDate(mouseidx,1)+1;
    stopTraining = dates.lastextDate(mouseidx,1);
    checkdate = startTraining;
    monthRollover = 0;
    %pause
    if ~isnan(checkdate)
        while sum(data.date==checkdate & strcmpi(thisMouse, data.mouse))<150 % while not an extinction session
            if sum(data.date==checkdate)==0
                startstring = num2str(checkdate);
                monthnum = str2double(startstring(3:4));
                if monthnum==9 || monthnum==4 || monthnum==6 || monthnum==11
                    % month has 30 days
                    lastDayInMonth = [startstring(1:4),'30'];
                elseif monthnum==2
                    % month days depends on if year is a leap year (if it was 2019 or
                    % 2020 when I did the experiment, for simplification)
                    if strcmpi(startstring(1:2),'19')
                        lastDayInMonth = [startstring(1:4),'27'];
                    elseif strcmpi(startstring(1:2),'20')
                        lastDayInMonth = [startstring(1:4),'28'];
                    else
                        disp('script not designed to accommodate this year')
                        pause
                    end
                else
                    % month has 31 days
                    lastDayInMonth = [startstring(1:4),'31'];
                end
                if checkdate>=str2double(lastDayInMonth)
                    if monthnum==12 % need to increment year + month
                        pause
                        year = num2str(str2double(startstring(1:2))+1);
                        month = '01';
                        day = '01';
                        checkdate = str2double([year,month,day]);
                    else % need to increment month only
                        month = num2str(str2double(startstring(3:4))+1);
                        if length(month)==1
                            month = ['0',month];
                        end
                        day = '01';
                        checkdate = str2double([startstring(1:2),month,day]);
                    end
                    monthRollover = 2;
                else % just a missing training session
                    checkdate = checkdate + 1;
                    if monthRollover > 0
                        monthRollover = monthRollover -1;
                    end
                end
            else
                checkdate= checkdate+1;
                if monthRollover > 0
                    monthRollover = monthRollover -1;
                end
            end
        end
        if monthRollover>0
            startTraining = str2double(lastDayInMonth)-2+monthRollover;
        else
            startTraining = checkdate-2;
        end
%         sum(data.date==startTraining & strcmpi(thisMouse, data.mouse))
%         sum(data.date==checkdate-1 & strcmpi(thisMouse, data.mouse))
%         sum(data.date==checkdate & strcmpi(thisMouse, data.mouse))
%         pause
    end
    if ~isnan(startTraining)
        [trainingSessions] = getDateVector(startTraining, stopTraining);
        [extinction]=updateCRRBProbStruct(trainingSessions, thisMouse, data, extinction, timeVector, 'extinction');
    end
    
    % savings
    mousedates = unique(data.date(strcmpi(data.mouse,thisMouse),1));
    extposttestidx = find(mousedates==dates.postextDate(mouseidx,1));
    startTraining = mousedates(extposttestidx+1,1);
    stopTraining = mousedates(end,1);
%     dates.postextDate(mouseidx,1)
%     startTraining
%     stopTraining
%     pause
    if ~isnan(startTraining)
        [trainingSessions] = getDateVector(startTraining, stopTraining);
        [savings]=updateCRRBProbStruct(trainingSessions, thisMouse, data, savings, timeVector, 'savings');
    end
    
    % get rebound traces/amps/probabilities before training
    trainingSession = dates.prepairDate(mouseidx,1);
    if isnan(trainingSession)
        trainingSession = dates.postunpDate(mouseidx,1);
    end
    [rebound.prePaired]=updateRBStruct(trainingSession, thisMouse, data, rebound.prePaired, timeVector);
    
    % rebound features after training
    trainingSession = dates.postpairDate(mouseidx,1);
    if ~isnan(trainingSession)
        [rebound.postPaired]=updateRBStruct(trainingSession, thisMouse, data, rebound.postPaired, timeVector);
    end

    % rebound features before & after unpaired training
    trainingSession = dates.preunpDate(mouseidx,1);
    if ~isnan(trainingSession)
        [rebound.preUnp]=updateRBStruct(trainingSession, thisMouse, data, rebound.preUnp, timeVector);
    end
    trainingSession = dates.postunpDate(mouseidx,1);
    if ~isnan(trainingSession)
        [rebound.postUnp]=updateRBStruct(trainingSession, thisMouse, data, rebound.postUnp, timeVector);
    end
    
    % rebound features after extinction
    trainingSession = dates.postextDate(mouseidx,1);
    if ~isnan(trainingSession)
        [rebound.postExt]=updateRBStruct(trainingSession, thisMouse, data, rebound.postExt, timeVector);
    end

    
    clear thisMouse mouseidx midx eyelidpos sessdate trialtype csdur usdur...
        isi laserdur laserint laserdelay startTraining stopTraining
end


% find best laser intensity for rebounds for each mouse
anims = unique(rebound.postPaired.mouse);
rbprobs = nan(length(anims),3);
rbamps = nan(length(anims),3);
possibints = [15,30,60];
bestInt_prob = nan(length(anims),1);
bestInt_amp = nan(length(anims),1);
for a = 1:length(anims)
    aidx = find(strcmpi(rebound.postPaired.mouse,anims{a,1}));
    temp = rebound.postPaired.rbprob(aidx)';
    rbprobs(a,:) = temp(1:3);
    [~,maxidx] = max(temp);
    bestInt_prob(a,1) = possibints(maxidx);
    
    temp = rebound.postPaired.rbamp(aidx)';
    rbamps(a,:) = temp(1:3);
    [~,maxidx] = max(temp);
    bestInt_amp(a,1) = possibints(maxidx);
end

% make group figure for task acquisition
pairedphasecrprob = nan(20,2);
pairedphasecradjamp = nan(20,2);
unpairedphasecrprob = nan(20,2);
unpairedphasecradjamp = nan(20,2);
pairedphaseeyelidpos = nan(20,440);
unpairedphaseeyelidpos = nan(20,440);
for s = 1:20
    pairedphasecrprob(s,1) = nanmedian(paired.crprob(paired.session==s,1));
    pairedphasecrprob(s,2) = mad(paired.crprob(paired.session==s,1),1);
    
    unpairedphasecrprob(s,1) = nanmedian(unpaired.crprob(unpaired.session==s,1));
    unpairedphasecrprob(s,2) = mad(unpaired.crprob(unpaired.session==s,1),1);
    
    pairedphasecradjamp(s,1) = nanmedian(paired.cradjamp(paired.session==s,1));
    pairedphasecradjamp(s,2) = mad(paired.cradjamp(paired.session==s,1),1);
    
    unpairedphasecradjamp(s,1) = nanmedian(unpaired.cradjamp(unpaired.session==s,1));
    unpairedphasecradjamp(s,2) = mad(unpaired.cradjamp(unpaired.session==s,1),1);
    
    pairedphaseeyelidpos(s,:) = nanmean(paired.eyelidposadj(paired.session==s,:));
    unpairedphaseeyelidpos(s,:) = nanmean(unpaired.eyelidposadj(unpaired.session==s,:));
end
pairedmice = unique(paired.mouse);
lasteyelidtrace = nan(length(pairedmice),440);
for m = 1:length(pairedmice)
    sessions = unique(paired.session(strcmpi(paired.mouse,pairedmice{m,1})));
    lastsession = max(sessions);
    if lastsession>2
        lasteyelidtrace(m,:) = paired.eyelidposadj(...
            strcmpi(paired.mouse,pairedmice{m,1}) ...
            & paired.session==lastsession,:);
    end
end
unpairedmice = unique(unpaired.mouse);
unpairedlasteyelidtrace = nan(length(unpairedmice),440);
for m = 1:length(unpairedmice)
    sessions = unique(unpaired.session(strcmpi(unpaired.mouse,unpairedmice{m,1})));
    lastsession = max(sessions);
    unpairedlasteyelidtrace(m,:) = unpaired.eyelidposadj(...
        strcmpi(unpaired.mouse,unpairedmice{m,1}) ...
        & unpaired.session==lastsession,:);
end
figure
subplot(2,6,[1:6])
a=errorbar(1:length(pairedphasecrprob), pairedphasecrprob(:,1), pairedphasecrprob(:,2));
set(a,'CapSize',0, 'Marker', 'o')
hold on
b=errorbar(1:length(unpairedphasecrprob), unpairedphasecrprob(:,1), unpairedphasecrprob(:,2));
set(b,'CapSize',0, 'Marker', 'o')
ylabel('CR Probability')
legend('paired training', 'unpaired training', 'Location', 'NorthWest')
xlabel('session')
text(14, 0.4, ['paired n = ', num2str(length(unique(paired.mouse)))])
text(14, 0.3, ['unpaired n = ', num2str(length(unique(unpaired.mouse)))])
subplot(2,6,[7,8])
hold on
plot(timeVector, pairedphaseeyelidpos(1,:)')
plot(timeVector, nanmean(lasteyelidtrace))
plot(timeVector, unpairedphaseeyelidpos(1,:)')
plot(timeVector, nanmean(unpairedlasteyelidtrace))
xlim([0 0.3])
ylim([0 1])
legend('day 1, P', 'last day, P', 'day 1, U', 'last day, U', 'Location', 'NorthWest')
subplot(2,6,[9,10]) % for this one, just plot the RB's at the best intensity
rbtrace.prepaired = nan(length(anims),440);
rbtrace.postpaired = nan(length(anims),440);
rbtrace.preunpaired = nan(length(anims),440);
rbtrace.postunpaired = nan(length(anims),440);
for a = 1:length(anims)
    if ~strcmpi(anims{m,1},'OK235')
        [rbtrace.prepaired] = getTrace(rebound.prePaired, rbtrace.prepaired, a, bestInt_prob, anims{a,1});
        [rbtrace.postpaired] = getTrace(rebound.postPaired, rbtrace.postpaired, a, bestInt_prob, anims{a,1});
    end
    [rbtrace.preunpaired] = getTrace(rebound.preUnp, rbtrace.preunpaired, a, bestInt_prob, anims{a,1});
    [rbtrace.postunpaired] = getTrace(rebound.postUnp, rbtrace.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plot(timeVector, nanmean(rbtrace.prepaired)')
plot(timeVector, nanmean(rbtrace.postpaired)')
plot(timeVector, nanmean(rbtrace.preunpaired)')
plot(timeVector, nanmean(rbtrace.postunpaired)')
xlim([0.85 1.4])
ylim([0 1])
subplot(2,6,11) % for this one, just plot the RB's at the best intensity 
rbprob.prepaired = nan(length(anims),1);
rbprob.postpaired = nan(length(anims),1);
rbprob.preunpaired = nan(length(anims),1);
rbprob.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    if ~strcmpi(anims{m,1},'OK235')
        [rbprob.prepaired] = getProb(rebound.prePaired, rbprob.prepaired, a, bestInt_prob, anims{a,1});
        [rbprob.postpaired] = getProb(rebound.postPaired, rbprob.postpaired, a, bestInt_prob, anims{a,1});
    end
    [rbprob.preunpaired] = getProb(rebound.preUnp, rbprob.preunpaired, a, bestInt_prob, anims{a,1});
    [rbprob.postunpaired] = getProb(rebound.postUnp, rbprob.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plotMedianBoxplot(rbprob.prepaired, 1, 0.25, [0 0 1])
plotMedianBoxplot(rbprob.postpaired, 2, 0.25, [0 0 1])
plotMedianBoxplot(rbprob.preunpaired, 4, 0.25, [1 0 0])
plotMedianBoxplot(rbprob.postunpaired, 5, 0.25, [1 0 0])
text(4, 0.9, ['n = ',num2str(sum(~isnan(rbprob.prepaired)))], 'Color', [0 0 1])
text(4, 0.8, ['n = ',num2str(sum(~isnan(rbprob.preunpaired)))], 'Color', [1 0 0])
plot([1 1.9], [1 1], 'Color', [0 0 1])
text(1.5, 1.05, '**', 'HorizontalAlignment', 'center')
plot([2.1 5], [1 1], 'Color', [1 0 1])
text(3.5, 1.05, '**', 'HorizontalAlignment', 'center')
xlim([0.5 5.5])
ylim([0 1.1])
ylabel('Rebound Probability')
xticks([1,2,4,5])
xticklabels({'BP','AP','BU','BP'})
subplot(2,6,12) % for this one, just plot the RB's at the best intensity 
rbamp.prepaired = nan(length(anims),1);
rbamp.postpaired = nan(length(anims),1);
rbamp.preunpaired = nan(length(anims),1);
rbamp.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    [rbamp.prepaired] = getAmp(rebound.prePaired, rbamp.prepaired, a, bestInt_prob, anims{a,1});
    [rbamp.postpaired] = getAmp(rebound.postPaired, rbamp.postpaired, a, bestInt_prob, anims{a,1});
    [rbamp.preunpaired] = getAmp(rebound.preUnp, rbamp.preunpaired, a, bestInt_prob, anims{a,1});
    [rbamp.postunpaired] = getAmp(rebound.postUnp, rbamp.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plotMedianBoxplot(rbamp.prepaired, 1, 0.25, [0 0 1])
plotMedianBoxplot(rbamp.postpaired, 2, 0.25, [0 0 1])
plotMedianBoxplot(rbamp.preunpaired, 4, 0.25, [1 0 0])
plotMedianBoxplot(rbamp.postunpaired, 5, 0.25, [1 0 0])
plot([1 1.9], [0.7 0.7], 'Color', [0 0 1])
text(1.5, 0.75, '**', 'HorizontalAlignment', 'center')
plot([2.1 5], [0.7 0.7], 'Color', [1 0 1])
text(3.5, 0.75, '**', 'HorizontalAlignment', 'center')
xlim([0.5 5.5])
ylim([0 1])
ylabel('Rebound Amplitude (FEC)')
xticks([1,2,4,5])
xticklabels({'BP','AP','BU','BP'})

%% write rebound probability and amplitude information to a table for R to look at
values = [rbprob.prepaired, rbprob.postpaired];
headers = {'PrePairProb','PostPairProb'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PreVsPostPairedTraining_RBProb_forPairedComp.csv')

values = [rbprob.preunpaired, rbprob.postunpaired];
headers = {'PreUnpairProb','PostUnpairProb'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PreVsPostUnpairedTraining_RBProb_forPairedComp.csv')

values = [rbprob.postpaired, rbprob.postunpaired];
headers = {'PostPairProb','PostUnpairProb'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PostPairVsUnpairedTraining_RBProb_forPairedComp.csv')

values = [rbprob.prepaired, rbprob.preunpaired];
headers = {'PrePairProb','PreUnpairProb'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PrePairVsUnpairedTraining_RBProb_forPairedComp.csv')

values = [rbamp.prepaired, rbamp.postpaired];
headers = {'PrePairAmp','PostPairAmp'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PreVsPostPairedTraining_RBAmp_forPairedComp.csv')

values = [rbamp.preunpaired, rbamp.postunpaired];
headers = {'PreUnpairAmp','PostUnpairAmp'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PreVsPostUnpairedTraining_RBAmp_forPairedComp.csv')

values = [rbamp.postpaired, rbamp.postunpaired];
headers = {'PostPairAmp','PostUnpairAmp'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PostPairVsUnpairedTraining_RBAmp_forPairedComp.csv')

values = [rbamp.prepaired, rbamp.preunpaired];
headers = {'PrePairAmp','PreUnpairAmp'};
tempcsv = [headers;num2cell(values)];
tempcsv = cell2table(tempcsv(2:end,:),'VariableNames',tempcsv(1,:));
writetable(tempcsv,'PrePairVsUnpairedTraining_RBAmp_forPairedComp.csv')

%% make a version of the figure that would allow you to test the order effects in a normal ANOVA
% is this not going to work because I have  different number of days for
% acquisition and extinction/unpaired training?

% make group figure for task acquisition
PFMice = {'OK211';'OK213';'OK214';'OK215';'OK216';'OK217';'OK218'};
[pairedphasecrprob_PF, pairedphasecradjamp_PF, unpairedphasecrprob_PF,...
    unpairedphasecradjamp_PF, pairedphaseeyelidpos_PF, unpairedphaseeyelidpos_PF]=...
    getGroupOfMiceData(PFMice, paired, extinction);
UFMice = {'OK234';'OK236';'OK237';'OK238';'OK239';'OK240';'OK241'};
[pairedphasecrprob_UF, pairedphasecradjamp_UF, unpairedphasecrprob_UF,...
    unpairedphasecradjamp_UF, pairedphaseeyelidpos_UF, unpairedphaseeyelidpos_UF]=...
    getGroupOfMiceData(UFMice, paired, unpaired);

%% make extinction figure
extnctionmice = {'OK211';'OK213';'OK214';'OK215';'OK216';'OK217';'OK218';...
    'OK234';'OK236';'OK237';'OK238';'OK239';'OK240';'OK241'};
[extphasecrprob, extphasecradjamp, savphasecrprob,...
    savphasecradjamp, extphaseeyelidpos, savphaseeyelidpos]=...
    getGroupOfMiceData(extnctionmice, extinction, savings);
figure
subplot(3,6,[1:6])
b=errorbar(1:length(extphasecrprob), extphasecrprob(:,1), extphasecrprob(:,2));
set(b,'CapSize',0, 'Marker', 'o', 'LineStyle', 'none')
hold on
c=errorbar(13:12+length(savphasecrprob), savphasecrprob(:,1), savphasecrprob(:,2));
set(c,'CapSize',0, 'Marker', 'o', 'LineStyle', 'none')
plot([2.5 2.5], [0 1], 'Color', [0 0 0], 'LineStyle', '--')
plot([12.5 12.5], [0 1], 'Color', [0 0 0], 'LineStyle', '--')
xlim([0.5 17.5])
ylabel('CR Probability')
xlabel('session')
text(10, 0.9, ['n = ', num2str(length(unique(unpaired.mouse)))])
subplot(3,6,[7,8])
hold on
for i = 2:12
plot(timeVector, extphaseeyelidpos(i,:)')
end
xlim([0 0.3])
ylim([0 1])
legend('B','1','2','3','4','5','6','7','8','9','10', 'Location', 'NorthWest')
subplot(3,6,[9,10]) % for this one, just plot the RB's at the best intensity
rbtrace.preunpaired = nan(length(anims),440);
rbtrace.postunpaired = nan(length(anims),440);
for a = 1:length(anims)
    [rbtrace.preunpaired] = getTrace(rebound.postPaired, rbtrace.preunpaired, a, bestInt_prob, anims{a,1});
    [rbtrace.postunpaired] = getTrace(rebound.postExt, rbtrace.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plot(timeVector, nanmean(rbtrace.preunpaired)')
plot(timeVector, nanmean(rbtrace.postunpaired)')
xlim([0.85 1.4])
ylim([0 1])
subplot(3,6,11) % for this one, just plot the RB's at the best intensity 
rbprob.preunpaired = nan(length(anims),1);
rbprob.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    [rbprob.preunpaired] = getProb(rebound.postPaired, rbprob.preunpaired, a, bestInt_prob, anims{a,1});
    [rbprob.postunpaired] = getProb(rebound.postExt, rbprob.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plotMedianBoxplot(rbprob.preunpaired, 1, 0.25, [1 0 0])
plotMedianBoxplot(rbprob.postunpaired, 2, 0.25, [1 0 0])
xlim([0.5 2.5])
ylim([0 1.1])
ylabel('Rebound Probability')
subplot(3,6,12) % for this one, just plot the RB's at the best intensity 
rbamp.preunpaired = nan(length(anims),1);
rbamp.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    [rbamp.preunpaired] = getAmp(rebound.postPaired, rbamp.preunpaired, a, bestInt_prob, anims{a,1});
    [rbamp.postunpaired] = getAmp(rebound.postExt, rbamp.postunpaired, a, bestInt_prob, anims{a,1});
end
hold on
plotMedianBoxplot(rbamp.preunpaired, 1, 0.25, [1 0 0])
plotMedianBoxplot(rbamp.postunpaired, 2, 0.25, [1 0 0])
xlim([0.5 2.5])
ylim([0 1])
ylabel('Rebound Amplitude (FEC)')
sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
thresh = [0.6, 0.8, 0.6, 0.6, 0.6, 0.55, 0.6, 0.6, 0.7, 0.5, 0.6, 0.5, 0.6, 0.7];
for i=1:length(extnctionmice)
%     figure
%     plot(paired.cradjamp(strcmpi(paired.mouse, extnctionmice{i,1}),:))
%     hold on
%     plot(savings.cradjamp(strcmpi(savings.mouse, extnctionmice{i,1}),:))
%     pause
%     close all
   
    
    temp = paired.cradjamp(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=thresh(i);
    temp = find(temp);
    if i==10 || i==12 % big startles on first day of training
        sessionsToShow10Pct_acq(i,1) = temp(2);
    else
        sessionsToShow10Pct_acq(i,1) = temp(1);
    end
    
    
    temp = savings.cradjamp(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=thresh(i);
    temp = find(temp);
    sessionsToShow10Pct_sav(i,1) = temp(1);
end
savsessions = sessionsToShow10Pct_acq-sessionsToShow10Pct_sav;
subplot(3,4,[9,10])
a = scatter(sessionsToShow10Pct_sav, rbprob.postunpaired, 4);
set(a, 'MarkerFaceColor', [0 0 1], 'MarkerEdgeColor', [0 0 1])
hold on
lsline
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman');
text(7, 0.8, ['r =',num2str(r)])
text(7, 0.7, ['p=',num2str(p)])
xlim([0.5 10.5])
ylim([0 1])
ylabel('RB Prob after Ext')
xlabel('Sessions to Reacquire')
subplot(3,4,11)
hold on
plotMedianBoxplot(sessionsToShow10Pct_acq, 1, 0.25, [1 0 0])
plotMedianBoxplot(sessionsToShow10Pct_sav, 2, 0.25, [1 0 0])
ylabel('Sessions')
xticks([1,2])
xticklabels({'Acq','Sav'})
xlim([0.5 2.5])

% how many days until mouse showed > 10% CRs in acquisition
sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
for i=1:length(extnctionmice)
    temp = paired.crprob(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=0.1;
    temp = find(temp);
    sessionsToShow10Pct_acq(i,1) = temp(1);
    
    
    temp = savings.crprob(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=0.1;
    temp = find(temp);
    sessionsToShow10Pct_sav(i,1) = temp(1);
end
[sessionsToShow10Pct_acq, sessionsToShow10Pct_sav]


sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
for i=1:length(extnctionmice)
    temp = paired.crprob(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=0.5;
    temp = find(temp);
    sessionsToShow10Pct_acq(i,1) = temp(1);
    
    
    temp = savings.crprob(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=0.5;
    temp = find(temp);
    sessionsToShow10Pct_sav(i,1) = temp(1);
end
hist(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav)

sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
for i=1:length(extnctionmice)
    temp = paired.crprob(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=0.65;
    temp = find(temp);
    sessionsToShow10Pct_acq(i,1) = temp(1);
    
    
    temp = savings.crprob(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=0.65;
    temp = find(temp);
    sessionsToShow10Pct_sav(i,1) = temp(1);
end
figure
hist(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav)
savsessions = sessionsToShow10Pct_acq-sessionsToShow10Pct_sav;

% this one works but it would be sort of weird to write it up
figure
scatter(savsessions, rbprob.preunpaired)
[r,p]=corr(savsessions, rbprob.preunpaired, 'Type', 'Spearman')

figure
scatter(savsessions, rbprob.postunpaired)
[r,p]=corr(savsessions, rbprob.postunpaired, 'Type', 'Spearman')


figure
scatter(sessionsToShow10Pct_sav, rbprob.postunpaired)
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Kendall')
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman')
[r,p]=corr(log(sessionsToShow10Pct_sav), log(rbprob.postunpaired), 'Type', 'Spearman')



figure
scatter(savsessions, rbprob.postunpaired)
[r,p]=corr(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman')
[r,p]=corr(log(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav), log(rbprob.postunpaired), 'Type', 'Spearman')

% try excluding the 3 mice with no rebounds after extinction
figure
scatter(savsessions, rbprob.postunpaired)
hold on
scatter(savsessions(rbprob.postunpaired>0), rbprob.postunpaired(rbprob.postunpaired>0))
[r,p]=corr(savsessions(rbprob.postunpaired>0), rbprob.postunpaired(rbprob.postunpaired>0), 'Type', 'Spearman')

[rbprob.postunpaired(rbprob.postunpaired==0) rbprob.postpaired(rbprob.postunpaired==0)]


% try excluding the 2 mice with a lot of savings and no rebounds
figure
scatter(savsessions, rbprob.postunpaired)
hold on
scatter(savsessions(savsessions~=8), rbprob.postunpaired(savsessions~=8))
[r,p]=corr(savsessions(savsessions~=8), rbprob.postunpaired(savsessions~=8), 'Type', 'Spearman')


figure
scatter(savsessions, rbamp.postunpaired)
[r,p]=corr(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav, rbamp.postunpaired, 'Type', 'Spearman')
[r,p]=corr(log(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav), log(rbamp.postunpaired), 'Type', 'Spearman')

figure
scatter(sessionsToShow10Pct_sav, rbprob.postunpaired)
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman')
[r,p]=corr(log(sessionsToShow10Pct_sav), log(rbprob.postunpaired), 'Type', 'Spearman')

figure
scatter(sessionsToShow10Pct_sav, rbamp.postunpaired)
[r,p]=corr(sessionsToShow10Pct_sav, rbamp.postunpaired, 'Type', 'Spearman')
[r,p]=corr(log(sessionsToShow10Pct_sav), log(rbamp.postunpaired), 'Type', 'Spearman')


figure
scatter(sessionsToShow10Pct_sav(sessionsToShow10Pct_sav<10), rbprob.postunpaired(sessionsToShow10Pct_sav<10)-rbprob.preunpaired(sessionsToShow10Pct_sav<10))
[r,p]=corr(sessionsToShow10Pct_sav(sessionsToShow10Pct_sav<10), rbprob.postunpaired(sessionsToShow10Pct_sav<10)-rbprob.preunpaired(sessionsToShow10Pct_sav<10), 'Type', 'Spearman')

figure
scatter(savsessions, rbprob.preunpaired)
[r,p]=corr(savsessions, rbprob.preunpaired, 'Type', 'Spearman')


figure
scatter(savsessions(sessionsToShow10Pct_sav<10), rbamp.postunpaired(sessionsToShow10Pct_sav<10)-rbamp.preunpaired(sessionsToShow10Pct_sav<10))
[r,p]=corr(savsessions(sessionsToShow10Pct_sav<10), rbamp.postunpaired(sessionsToShow10Pct_sav<10)-rbamp.preunpaired(sessionsToShow10Pct_sav<10), 'Type', 'Spearman')


%% try looking at savings in terms of CR Amplitude

sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
thresh = [0.6, 0.8, 0.6, 0.6, 0.6, 0.55, 0.6, 0.6, 0.7, 0.5, 0.6, 0.5, 0.6, 0.7];
for i=1:length(extnctionmice)
%     figure
%     plot(paired.cradjamp(strcmpi(paired.mouse, extnctionmice{i,1}),:))
%     hold on
%     plot(savings.cradjamp(strcmpi(savings.mouse, extnctionmice{i,1}),:))
%     pause
%     close all
   
    
    temp = paired.cradjamp(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=thresh(i);
    temp = find(temp);
    if i==10 || i==12 % big startles on first day of training
        sessionsToShow10Pct_acq(i,1) = temp(2);
    else
        sessionsToShow10Pct_acq(i,1) = temp(1);
    end
    
    
    temp = savings.cradjamp(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=thresh(i);
    temp = find(temp);
    sessionsToShow10Pct_sav(i,1) = temp(1);
end
savsessions = sessionsToShow10Pct_acq-sessionsToShow10Pct_sav;
figure
scatter(sessionsToShow10Pct_sav, rbprob.postunpaired)
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman')
% THE ONE ABOVE WORKS AND IT WOULD BE EASY TO WRITE UP

% this one works but it would be sort of weird to write it up
figure
scatter(savsessions, rbprob.preunpaired)
[r,p]=corr(savsessions, rbprob.preunpaired, 'Type', 'Spearman')

figure
scatter(savsessions, rbprob.postunpaired)
[r,p]=corr(savsessions, rbprob.postunpaired, 'Type', 'Spearman')

figure
scatter(savsessions, rbamp.preunpaired)
[r,p]=corr(savsessions, rbamp.preunpaired, 'Type', 'Spearman')

figure
scatter(savsessions, rbamp.postunpaired)
[r,p]=corr(savsessions, rbamp.postunpaired, 'Type', 'Spearman')

figure
scatter(sessionsToShow10Pct_sav, rbamp.postunpaired)
[r,p]=corr(sessionsToShow10Pct_sav, rbamp.postunpaired, 'Type', 'Spearman')
[r,p]=corr(sessionsToShow10Pct_sav, rbamp.preunpaired, 'Type', 'Spearman')
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.postunpaired, 'Type', 'Spearman')
[r,p]=corr(sessionsToShow10Pct_sav, rbprob.preunpaired, 'Type', 'Spearman')

% 
% sessionsToShow10Pct_acq = nan(length(extnctionmice), 1);
% sessionsToShow10Pct_sav = nan(length(extnctionmice), 1);
% thresh = [ones(1,7)*0.7,0.65,0.7, 0.65, 0.65, 0.7, 0.65, 0.7];
% for i=1:length(extnctionmice)
%     temp = paired.crprob(strcmpi(paired.mouse, extnctionmice{i,1}),:)>=thresh(i);
%     temp = find(temp);
%     sessionsToShow10Pct_acq(i,1) = temp(1);
%     
%     
%     temp = savings.crprob(strcmpi(savings.mouse, extnctionmice{i,1}),:)>=thresh(i);
%     temp = find(temp);
%     sessionsToShow10Pct_sav(i,1) = temp(1);
% end
% figure
% hist(sessionsToShow10Pct_acq-sessionsToShow10Pct_sav)



% try only looking at relationships at 30 mW
rbprob.preunpaired = nan(length(anims),1);
rbprob.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    [rbprob.preunpaired] = getProb(rebound.postPaired, rbprob.preunpaired, a, ones(length(bestInt_prob),1)*60, anims{a,1});
    [rbprob.postunpaired] = getProb(rebound.postExt, rbprob.postunpaired, a, ones(length(bestInt_prob),1)*60, anims{a,1});
end
rbamp.preunpaired = nan(length(anims),1);
rbamp.postunpaired = nan(length(anims),1);
for a = 1:length(anims)
    [rbamp.preunpaired] = getAmp(rebound.postPaired, rbamp.preunpaired, a, ones(length(bestInt_prob),1)*60, anims{a,1});
    [rbamp.postunpaired] = getAmp(rebound.postExt, rbamp.postunpaired, a, ones(length(bestInt_prob),1)*60, anims{a,1});
end

figure
savsessions = sessionsToShow10Pct_acq-sessionsToShow10Pct_sav;
scatter(savsessions, rbprob.postunpaired)
hold on
scatter(savsessions(savsessions~=8), rbprob.postunpaired(savsessions~=8))
[r,p]=corr(savsessions(savsessions~=8), rbprob.postunpaired(savsessions~=8), 'Type', 'Spearman')


% TO DO add savings analysis
% TO DO add field for RB hit trials only traces/amplitudes

% subplot(2,4,[5,6])
% a=errorbar(1:length(pairedphasecradjamp), pairedphasecradjamp(:,1), pairedphasecradjamp(:,2));
% set(a,'CapSize',0, 'Marker', 'o')
% hold on
% b=errorbar(1:length(unpairedphasecradjamp), unpairedphasecradjamp(:,1), unpairedphasecradjamp(:,2));
% set(b,'CapSize',0, 'Marker', 'o')
% ylabel('CR Amplitude')
% legend('paired training', 'unpaired training', 'Location', 'NorthWest')
% xlabel('session')
% text(14, 0.3, ['paired n = ', num2str(length(unique(paired.mouse)))])
% text(14, 0.2, ['unpaired n = ', num2str(length(unique(unpaired.mouse)))])